//
//  Helpers.swift
//  Gfror.li
//
//  Created by Marc Kramer on 11.09.20.
//
import UIKit
import Foundation

public func createDatefromString(string: String)->Date{
    var newDate = string
    newDate.removeLast(5)
    let dateFormatter = DateFormatter()
    dateFormatter.locale = Locale(identifier: "en_US_POSIX") // set locale to reliable US_POSIX
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss"
    let date = dateFormatter.date(from:newDate)!
    return date
}

public func createDateStringfromStringDate(string: String)->String{
    var newDate = string
    newDate.removeLast(5)
    let dateFormatter = DateFormatter()
    dateFormatter.locale = Locale(identifier: "en_US_POSIX") // set locale to reliable US_POSIX
    dateFormatter.dateFormat = "yyyy-MM-dd'T'HH:mm:ss"
    let date = dateFormatter.date(from:newDate)!
    let stringFormatter = DateFormatter()
    stringFormatter.dateFormat = "HH:mm, d. MMMM y"
    return stringFormatter.string(from: date)
    
}

public func createStringFromDate(date: Date)->String{
    
    let stringFormatter = DateFormatter()
    stringFormatter.dateFormat = "HH:mm, d. MMMM y"
    return stringFormatter.string(from: date)
    
}

enum NetworkError: Error {
    case badURL, requestFailed, decodeFailed ,unknown
}

enum loadingState: Equatable{
    case loading, loaded, error
}
enum TimeFrame{
    case day, week, month
}

/**
 Returns autogenerated string for feedback & bug-reports
 ~Marc
 */
public func getEmailBody() -> String{
    let version = ("App-Version: \(Bundle.main.infoDictionary?["CFBundleShortVersionString"] as? String ?? "unkown")")
    let model = "Device-Model: \(machineName())"
    let systemVersion = "OS-Version: \(UIDevice.current.systemName) \(UIDevice.current.systemVersion)"
    let lang = "Language: \(Locale.current.languageCode ?? "unkown")"
    let str = NSLocalizedString("email_text", comment: "")
    return "</br></br></br></br></br>\(str)</br></br>Info:</br>\(version)</br>\(model)</br>\(systemVersion)</br>\(lang)"
    
}

/**
 Returns modelname of device
 ~Marc
 */
func machineName() -> String {
  var systemInfo = utsname()
  uname(&systemInfo)
  let machineMirror = Mirror(reflecting: systemInfo.machine)
  return machineMirror.children.reduce("") { identifier, element in
    guard let value = element.value as? Int8, value != 0 else { return identifier }
    return identifier + String(UnicodeScalar(UInt8(value)))
  }
}
